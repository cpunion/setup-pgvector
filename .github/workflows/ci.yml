name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04, windows-latest, windows-2019, macos-latest, macos-13]
        include:
          - os: ubuntu-latest
            postgres-version: '17'
          - os: ubuntu-24.04
            postgres-version: '17'
          - os: windows-latest
            postgres-version: '17'
          - os: windows-2019
            postgres-version: '17'
          - os: macos-latest
            postgres-version: '17'
          - os: macos-13
            postgres-version: '17'

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup pgvector
      uses: ./
      with:
        postgres-version: ${{ matrix.postgres-version }}
        
    - name: Test Extension (Unix)
      if: runner.os != 'Windows'
      run: |
        psql -d postgres -c 'CREATE EXTENSION IF NOT EXISTS vector;'
        psql -d postgres -c 'CREATE TABLE IF NOT EXISTS items (id bigserial PRIMARY KEY, embedding vector(3));'
        psql -d postgres -c "INSERT INTO items (embedding) VALUES ('[1,2,3]');"
        psql -d postgres -c 'SELECT * FROM items;'

    - name: Setup Test Data (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        psql -d postgres -c 'CREATE EXTENSION IF NOT EXISTS vector;'
        psql -d postgres -c 'CREATE TABLE IF NOT EXISTS items (id bigserial PRIMARY KEY, embedding vector(3));'
        psql -d postgres -c "INSERT INTO items (embedding) VALUES ('[1,2,3]');"
        psql -d postgres -c 'SELECT * FROM items;'

    - name: Test Query (Windows CMD)
      if: runner.os == 'Windows'
      shell: cmd
      run: psql -d postgres -c "SELECT * FROM items;"

    - name: Test Query (Windows MSYS2)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: psql -d postgres -c 'SELECT * FROM items;'
